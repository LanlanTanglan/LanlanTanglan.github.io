{"title":"01背包","uid":"d26940bc311bdaabb8d1c2107d93235d","slug":"01背包","date":"2022-01-30T01:25:12.000Z","updated":"2022-01-30T01:49:10.676Z","comments":true,"path":"api/articles/01背包.json","keywords":null,"cover":"/post/Unity3d关键词汇总/m001.jpg","content":"<h1 id=\"01背包问题\"><a href=\"#01背包问题\" class=\"headerlink\" title=\"01背包问题\"></a>01背包问题</h1><p>有$N$件物品和一个容量是$V$的背包。每件物品只能使用一次。</p>\n<p>第$i$ 件物品的体积是$v_i$，价值是 $w_i$。</p>\n<p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第一行两个整数$N$, $V$用空格隔开，分别表示物品数量和背包容积。</p>\n<p>接下来有 $N$ 行，每行两个整数$v_i$, $w_i$，用空格隔开，分别表示第$i$件物品的体积和价值。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>输出一个整数，表示最大价值。</p>\n<h4 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4><p>$0&lt;N,V≤1000$<br>$0&lt;v_i,w_i≤1000$</p>\n<h4 id=\"输入样例\"><a href=\"#输入样例\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">4 5\n1 2\n2 4\n3 4\n4 5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"代码（部分\"><a href=\"#代码（部分\" class=\"headerlink\" title=\"代码（部分)\"></a>代码（部分)</h2><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">for(int i &#x3D; 0; i &lt; N; i++)&#123;\n    for(int j &#x3D; V; j&gt;&#x3D;v[i]; j--)&#123;\n        dp[j]&#x3D;max(dp[j],dp[j-v[i]]+w[i]);\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"多重背包问题\"><a href=\"#多重背包问题\" class=\"headerlink\" title=\"多重背包问题\"></a>多重背包问题</h1><p>有 $N$种物品和一个容量是 $V $的背包。</p>\n<p>第 $i$ 种物品最多有$ s_i$ 件，每件体积是 v_i，价值是 w_i。</p>\n<p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p>\n<h4 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第一行两个整数，$N, V$用空格隔开，分别表示物品种数和背包容积。</p>\n<p>接下来有N 行，每行三个整数 $v_i, w_i, s_i$，用空格隔开，分别表示第i种物品的体积、价值和数量。</p>\n<h4 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>输出一个整数，表示最大价值。</p>\n<h4 id=\"数据范围-1\"><a href=\"#数据范围-1\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4><p>$0&lt;N≤1000$<br>$0&lt;V≤2000$<br>$0&lt;v_i,w_i,s_i≤2000$</p>\n<h5 id=\"提示：\"><a href=\"#提示：\" class=\"headerlink\" title=\"提示：\"></a>提示：</h5><p>本题考查多重背包的二进制优化方法。</p>\n<h4 id=\"输入样例-1\"><a href=\"#输入样例-1\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">4 5\n1 2 3\n2 4 1\n3 4 3\n4 5 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"输出样例：-1\"><a href=\"#输出样例：-1\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>一个物品可以放多个</p>\n<p>若是采用</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> k<span class=\"token operator\">*</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> k<span class=\"token operator\">*</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>时间复杂度将会达到$O(n^3)$</p>\n<p>所以我们得想办法，简化到01背包的复杂度</p>\n<p>于是可以思考，将一个物品按照<strong>数量的二进制表示</strong>拆成多个物品。而这些物品的组合正好可以枚举所有的物品选择情况。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst int MAXN &#x3D; 2010;\nint N, V;\nint dp[MAXN];\n\nstruct Good &#123;\n    int v;\n    int w;\n&#125;;\n\nint main() &#123;\n    cin &gt;&gt; N &gt;&gt; V;\n    vector&lt;Good&gt; goods;\n    for (int i &#x3D; 1; i &lt;&#x3D; N; i++) &#123;\n        int v, w, s;\n        cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;\n        for (int k &#x3D; 1; k &lt;&#x3D; s; k *&#x3D; 2) &#123;\n            s -&#x3D; k;\n            goods.push_back(Good&#123;v * k, w * k&#125;);\n        &#125;\n        if (s &gt; 0) &#123;\n            goods.push_back(Good&#123;v * s, w * s&#125;);\n        &#125;\n    &#125;\n\n    for (Good g : goods) &#123;\n        for (int j &#x3D; V; j &gt;&#x3D; g.v; j--) &#123;\n            dp[j] &#x3D; max(dp[j], dp[j - g.v] + g.w);\n        &#125;\n    &#125;\n    cout &lt;&lt; dp[V] &lt;&lt; endl;\n    return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"01背包问题有$N$件物品和一个容量是$V$的背包。每件物品只能使用一次。 第$i$ 件物品的体积是$v_i$，价值是 $w_i$。 求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。输出最大价值。 输入格式第一行两个整数$N$, $V$用空格隔开，分别表...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"算法模板题","slug":"算法模板题","count":2,"path":"api/categories/算法模板题.json"}],"tags":[{"name":"算法","slug":"算法","count":2,"path":"api/tags/算法.json"},{"name":"模板题","slug":"模板题","count":2,"path":"api/tags/模板题.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">01背包问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">数据范围</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%B7%E4%BE%8B\"><span class=\"toc-text\">输入样例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%B7%E4%BE%8B%EF%BC%9A\"><span class=\"toc-text\">输出样例：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%EF%BC%88%E9%83%A8%E5%88%86\"><span class=\"toc-text\">代码（部分)</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">多重背包问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F-1\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F-1\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4-1\"><span class=\"toc-text\">数据范围</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8F%90%E7%A4%BA%EF%BC%9A\"><span class=\"toc-text\">提示：</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%B7%E4%BE%8B-1\"><span class=\"toc-text\">输入样例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%B7%E4%BE%8B%EF%BC%9A-1\"><span class=\"toc-text\">输出样例：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90\"><span class=\"toc-text\">分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">代码</span></a></li></ol></li></ol>","author":{"name":"懒懒瑭岚","slug":"blog-author","avatar":"/post/java期末复习/1761bac35e69253aa2999ff26b7ed6bbf63c8a8a.jpg@100Q.webp","link":"/","description":"平平无奇的博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"前缀树","uid":"bd2630ea93d7635d80c029c760a63fbd","slug":"前缀树","date":"2022-02-02T09:05:56.000Z","updated":"2022-02-02T13:07:07.084Z","comments":true,"path":"api/articles/前缀树.json","keywords":null,"cover":"/post/Unity3d关键词汇总/m001.jpg","text":"什么是前缀树前缀树是N叉树的一种特殊形式。通常来说，一个前缀树是用来存储字符串的。前缀树的每一个节点代表一个字符串（前缀）。每一个节点会有多个子节点，通往不同子节点的路径上有着不同的字符。子节点代表的字符串是由节点本身的原始字符串，以及通往该子节点路径上所有的字符组成的。 维护前...","link":"","photos":[],"count_time":{"symbolsCount":875,"symbolsTime":"1 mins."},"categories":[{"name":"算法模板题","slug":"算法模板题","count":2,"path":"api/categories/算法模板题.json"}],"tags":[{"name":"算法","slug":"算法","count":2,"path":"api/tags/算法.json"},{"name":"模板题","slug":"模板题","count":2,"path":"api/tags/模板题.json"}],"author":{"name":"懒懒瑭岚","slug":"blog-author","avatar":"/post/java期末复习/1761bac35e69253aa2999ff26b7ed6bbf63c8a8a.jpg@100Q.webp","link":"/","description":"平平无奇的博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"明日方舟同人音游企划","uid":"116669a3ed5fb71c5880f8533b7c96e4","slug":"明日方舟同人音游企划","date":"2022-01-24T12:13:16.000Z","updated":"2022-01-27T13:12:11.449Z","comments":true,"path":"api/articles/明日方舟同人音游企划.json","keywords":null,"cover":"/post/随思所想（二）/m006.jpg","text":"目前现在这里写下想法 规则结构判定区域判定区域：为干员的攻击范围 判定头像：为干员头像（采用像素画格式测试） 攻击范围：基本组成是由一个个方格组成 方格：长宽比1:1，可以随意大小变 检测事件：在规定时间范围内检测用户是否点击，未点击则失效，点击则成功 判定 瞬间型：如射手，用户...","link":"","photos":[],"count_time":{"symbolsCount":952,"symbolsTime":"1 mins."},"categories":[{"name":"unity","slug":"unity","count":1,"path":"api/categories/unity.json"}],"tags":[{"name":"游戏","slug":"游戏","count":1,"path":"api/tags/游戏.json"}],"author":{"name":"懒懒瑭岚","slug":"blog-author","avatar":"/post/java期末复习/1761bac35e69253aa2999ff26b7ed6bbf63c8a8a.jpg@100Q.webp","link":"/","description":"平平无奇的博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}